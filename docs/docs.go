// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "ESD Support",
            "email": "esdsupport@ecco.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/algorithm/v1/buffer/{algorithmName}/requests/{requestId}": {
            "get": {
                "description": "Retrieves a buffered metadata for a run",
                "produces": [
                    "application/json",
                    "text/plain",
                    "text/html"
                ],
                "tags": [
                    "metadata"
                ],
                "summary": "Read a buffered run metadata (Kubernetes Job JSON)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Algorithm name",
                        "name": "algorithmName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request identifier",
                        "name": "requestId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/algorithm/v1/cancel/{algorithmName}/requests/{requestId}": {
            "post": {
                "description": "Interrupts the provided run id and cancels the execution tree if it exists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "text/plain",
                    "text/html"
                ],
                "tags": [
                    "run"
                ],
                "summary": "Cancels an algorithm run",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Algorithm name",
                        "name": "algorithmName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request identifier",
                        "name": "requestId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Cancellation configuration",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_SneaksAndData_nexus_api_v1_models.CancellationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/algorithm/v1/metadata/{algorithmName}/requests/{requestId}": {
            "get": {
                "description": "Retrieves checkpointed metadata for a run",
                "produces": [
                    "application/json",
                    "text/plain",
                    "text/html"
                ],
                "tags": [
                    "metadata"
                ],
                "summary": "Read a run metadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Algorithm name",
                        "name": "algorithmName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request identifier",
                        "name": "requestId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.CheckpointedRequest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/algorithm/v1/payload/{algorithmName}/requests/{requestId}": {
            "get": {
                "description": "Retrieves payload sent by the client for the provided run",
                "produces": [
                    "text/plain",
                    "text/html"
                ],
                "tags": [
                    "payload"
                ],
                "summary": "Read a run payload",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Algorithm name",
                        "name": "algorithmName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request identifier",
                        "name": "requestId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/algorithm/v1/results/tags/{requestTag}": {
            "get": {
                "description": "Read results of all runs with a matching tag",
                "produces": [
                    "application/json",
                    "text/plain",
                    "text/html"
                ],
                "tags": [
                    "results"
                ],
                "summary": "Read run results by tag",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request tag assigned by a client",
                        "name": "requestTag",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TaggedRequestResult"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/algorithm/v1/results/{algorithmName}/requests/{requestId}": {
            "get": {
                "description": "Retrieves a result for the provided run",
                "produces": [
                    "application/json",
                    "text/plain",
                    "text/html"
                ],
                "tags": [
                    "results"
                ],
                "summary": "Read a run result",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Algorithm name",
                        "name": "algorithmName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request identifier",
                        "name": "requestId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.RequestResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/algorithm/v1/run/{algorithmName}": {
            "post": {
                "description": "Accepts an algorithm payload and places it into a scheduling queue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "text/plain",
                    "text/html"
                ],
                "tags": [
                    "run"
                ],
                "summary": "Create a new algorithm run",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Algorithm name",
                        "name": "algorithmName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Run configuration",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AlgorithmRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_SneaksAndData_nexus_api_v1_models.CancellationRequest": {
            "type": "object",
            "properties": {
                "cancellationPolicy": {
                    "type": "string"
                },
                "initiator": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "models.AlgorithmRequest": {
            "type": "object",
            "required": [
                "algorithmParameters"
            ],
            "properties": {
                "algorithmParameters": {
                    "type": "object",
                    "additionalProperties": true
                },
                "customConfiguration": {
                    "$ref": "#/definitions/v1.NexusAlgorithmSpec"
                },
                "parentRequest": {
                    "$ref": "#/definitions/models.AlgorithmRequestRef"
                },
                "payloadValidFor": {
                    "type": "string"
                },
                "requestApiVersion": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "models.AlgorithmRequestRef": {
            "type": "object",
            "required": [
                "algorithmName",
                "requestId"
            ],
            "properties": {
                "algorithmName": {
                    "type": "string"
                },
                "requestId": {
                    "type": "string"
                }
            }
        },
        "models.CheckpointedRequest": {
            "type": "object",
            "properties": {
                "algorithm": {
                    "type": "string"
                },
                "algorithm_failure_cause": {
                    "type": "string"
                },
                "algorithm_failure_details": {
                    "type": "string"
                },
                "api_version": {
                    "type": "string"
                },
                "applied_configuration": {
                    "$ref": "#/definitions/v1.NexusAlgorithmSpec"
                },
                "configuration_overrides": {
                    "$ref": "#/definitions/v1.NexusAlgorithmSpec"
                },
                "content_hash": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "job_uid": {
                    "type": "string"
                },
                "last_modified": {
                    "type": "string"
                },
                "lifecycle_stage": {
                    "type": "string"
                },
                "parent": {
                    "$ref": "#/definitions/models.AlgorithmRequestRef"
                },
                "payload_uri": {
                    "type": "string"
                },
                "payload_valid_for": {
                    "type": "string"
                },
                "received_at": {
                    "type": "string"
                },
                "received_by_host": {
                    "type": "string"
                },
                "result_uri": {
                    "type": "string"
                },
                "sent_at": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "models.RequestResult": {
            "type": "object",
            "properties": {
                "requestId": {
                    "type": "string"
                },
                "resultUri": {
                    "type": "string"
                },
                "runErrorMessage": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.TaggedRequestResult": {
            "type": "object",
            "properties": {
                "algorithmName": {
                    "type": "string"
                },
                "requestId": {
                    "type": "string"
                },
                "resultUri": {
                    "type": "string"
                },
                "runErrorMessage": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "resource.Quantity": {
            "type": "object",
            "properties": {
                "Format": {
                    "type": "string",
                    "enum": [
                        "DecimalExponent",
                        "BinarySI",
                        "DecimalSI"
                    ],
                    "x-enum-comments": {
                        "BinarySI": "e.g., 12Mi (12 * 2^20)",
                        "DecimalExponent": "e.g., 12e6",
                        "DecimalSI": "e.g., 12M  (12 * 10^6)"
                    },
                    "x-enum-varnames": [
                        "DecimalExponent",
                        "BinarySI",
                        "DecimalSI"
                    ]
                }
            }
        },
        "v1.ConfigMapEnvSource": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop ` + "`" + `kubebuilder:default` + "`" + ` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.ConfigMapKeySelector": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The key to select.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop ` + "`" + `kubebuilder:default` + "`" + ` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap or its key must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.EnvFromSource": {
            "type": "object",
            "properties": {
                "configMapRef": {
                    "description": "The ConfigMap to select from\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapEnvSource"
                        }
                    ]
                },
                "prefix": {
                    "description": "Optional text to prepend to the name of each environment variable. Must be a C_IDENTIFIER.\n+optional",
                    "type": "string"
                },
                "secretRef": {
                    "description": "The Secret to select from\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretEnvSource"
                        }
                    ]
                }
            }
        },
        "v1.EnvVar": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                    "type": "string"
                },
                "value": {
                    "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".\n+optional",
                    "type": "string"
                },
                "valueFrom": {
                    "description": "Source for the environment variable's value. Cannot be used if value is not empty.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.EnvVarSource"
                        }
                    ]
                }
            }
        },
        "v1.EnvVarSource": {
            "type": "object",
            "properties": {
                "configMapKeyRef": {
                    "description": "Selects a key of a ConfigMap.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapKeySelector"
                        }
                    ]
                },
                "fieldRef": {
                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, ` + "`" + `metadata.labels['\u003cKEY\u003e']` + "`" + `, ` + "`" + `metadata.annotations['\u003cKEY\u003e']` + "`" + `,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectFieldSelector"
                        }
                    ]
                },
                "resourceFieldRef": {
                    "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceFieldSelector"
                        }
                    ]
                },
                "secretKeyRef": {
                    "description": "Selects a key of a secret in the pod's namespace\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretKeySelector"
                        }
                    ]
                }
            }
        },
        "v1.NexusAlgorithmContainer": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "string"
                },
                "registry": {
                    "type": "string"
                },
                "serviceAccountName": {
                    "type": "string"
                },
                "versionTag": {
                    "type": "string"
                }
            }
        },
        "v1.NexusAlgorithmResources": {
            "type": "object",
            "properties": {
                "cpuLimit": {
                    "type": "string"
                },
                "customResources": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "memoryLimit": {
                    "type": "string"
                }
            }
        },
        "v1.NexusAlgorithmRuntimeEnvironment": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "deadlineSeconds": {
                    "type": "integer"
                },
                "environmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvVar"
                    }
                },
                "mappedEnvironmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvFromSource"
                    }
                },
                "maximumRetries": {
                    "type": "integer"
                }
            }
        },
        "v1.NexusAlgorithmSpec": {
            "type": "object",
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "string"
                },
                "computeResources": {
                    "$ref": "#/definitions/v1.NexusAlgorithmResources"
                },
                "container": {
                    "$ref": "#/definitions/v1.NexusAlgorithmContainer"
                },
                "datadogIntegrationSettings": {
                    "$ref": "#/definitions/v1.NexusDatadogIntegrationSettings"
                },
                "errorHandlingBehaviour": {
                    "$ref": "#/definitions/v1.NexusErrorHandlingBehaviour"
                },
                "runtimeEnvironment": {
                    "$ref": "#/definitions/v1.NexusAlgorithmRuntimeEnvironment"
                },
                "workgroupRef": {
                    "$ref": "#/definitions/v1.NexusAlgorithmWorkgroupRef"
                }
            }
        },
        "v1.NexusAlgorithmWorkgroupRef": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "v1.NexusDatadogIntegrationSettings": {
            "type": "object",
            "properties": {
                "mountDatadogSocket": {
                    "type": "boolean"
                }
            }
        },
        "v1.NexusErrorHandlingBehaviour": {
            "type": "object",
            "properties": {
                "fatalExitCodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "transientExitCodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "v1.ObjectFieldSelector": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".\n+optional",
                    "type": "string"
                },
                "fieldPath": {
                    "description": "Path of the field to select in the specified API version.",
                    "type": "string"
                }
            }
        },
        "v1.ResourceFieldSelector": {
            "type": "object",
            "properties": {
                "containerName": {
                    "description": "Container name: required for volumes, optional for env vars\n+optional",
                    "type": "string"
                },
                "divisor": {
                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/resource.Quantity"
                        }
                    ]
                },
                "resource": {
                    "description": "Required: resource to select",
                    "type": "string"
                }
            }
        },
        "v1.SecretEnvSource": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop ` + "`" + `kubebuilder:default` + "`" + ` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the Secret must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.SecretKeySelector": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop ` + "`" + `kubebuilder:default` + "`" + ` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the Secret or its key must be defined\n+optional",
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/algorithm/v1",
	Schemes:          []string{},
	Title:            "Nexus Scheduler API",
	Description:      "Nexus Scheduler API specification. All Nexus supported clients conform to this spec.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
